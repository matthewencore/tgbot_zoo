from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from quiz_data import QUESTIONS
from utils.scoring import get_result_animal
from utils.image_gen import generate_result_image
from urllib.parse import quote
import sqlite3

user_states = {}
user_answers = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_states[user_id] = 0
    user_answers[user_id] = []
    await update.message.reply_text(
        "üêæ –ü—Ä–∏–≤–µ—Ç! –ì–æ—Ç–æ–≤ —É–∑–Ω–∞—Ç—å —Å–≤–æ—ë —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ –≤ –ú–æ—Å–∫–æ–≤—Å–∫–æ–º –∑–æ–æ–ø–∞—Ä–∫–µ?",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É üêæ", callback_data="start_quiz")]
        ])
    )

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    data = query.data

    if data == "contact":
        await query.message.reply_text(
            "üì© –ö–æ–Ω—Ç–∞–∫—Ç—ã –∑–æ–æ–ø–∞—Ä–∫–∞:\n‚úâÔ∏è Email: zoo@moscowzoo.ru\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 (495) 123-45-67"
        )
        return



    if data == "start_quiz":
        user_states[user_id] = 0
        user_answers[user_id] = []
        await send_question(query.message, user_id)
        return

    if data == "about_opeka":
        await query.message.reply_text(
            "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–ø–µ–∫–∏ –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –∑–æ–æ–ø–∞—Ä–∫–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∞–º —Å—Ç–∞—Ç—å —á–∞—Å—Ç—å—é –∂–∏–∑–Ω–∏ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ!"
            "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∂–∏–≤–æ—Ç–Ω–æ–µ –∏ –ø–æ–º–æ–≥–∞—Ç—å –∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ –Ω—ë–º ‚Äî –º–æ—Ä–∞–ª—å–Ω–æ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ."
            "–ü–æ–¥—Ä–æ–±–Ω–µ–µ: https://moscowzoo.ru/my-zoo/opeka"
        )
        return

    if data == "leave_feedback":
        await query.message.reply_text("‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç–∑—ã–≤ –ø—Ä—è–º–æ –≤ —á–∞—Ç. –ú—ã —á–∏—Ç–∞–µ–º –∫–∞–∂–¥—ã–π!")
        return

    if not data.startswith("answer_"):
        await query.message.reply_text("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç.")
        return

    try:
        answer = int(data.split("_")[1])
    except:
        await query.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –æ—Ç–≤–µ—Ç–∞.")
        return

    if user_id not in user_states or user_states[user_id] >= len(QUESTIONS):
        await query.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∑–∞–Ω–æ–≤–æ —Å /start.")
        return

    user_answers[user_id].append(answer)
    user_states[user_id] += 1

    if user_states[user_id] < len(QUESTIONS):
        await send_question(query.message, user_id)
    else:
        result = get_result_animal(user_answers[user_id])
        username = query.from_user.username or query.from_user.first_name or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        image_path = generate_result_image(result, username=username)

        share_text = f"–Ø –ø—Ä–æ—à—ë–ª –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –≤ –ú–æ—Å–∫–æ–≤—Å–∫–æ–º –∑–æ–æ–ø–∞—Ä–∫–µ –∏ —É–∑–Ω–∞–ª, —á—Ç–æ –º–æ—ë —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ ‚Äî {result['name']}! üêæ –ü—Ä–æ–π–¥–∏ –∏ —Ç—ã!"
        share_url = f"https://t.me/share/url?url=https://t.me/ZOO_MSCW_matthewencore_BOT&text={quote(share_text)}"
        vk_url = f"https://vk.com/share.php?url=https://t.me/ZOO_MSCW_matthewencore_BOT&title={quote(share_text)}"

        await query.message.reply_photo(
            photo=image_path,
            caption=(
                f"üéâ –¢–≤–æ—ë —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ ‚Äî {result['name']}!"
                f"{result['description']}"
                "üß° –ú–æ—Å–∫–æ–≤—Å–∫–∏–π –∑–æ–æ–ø–∞—Ä–∫ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –æ–ø–µ–∫–∏!"
                "–°—Ç–∞–Ω—å –¥—Ä—É–≥–æ–º –∂–∏–≤–æ—Ç–Ω–æ–≥–æ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏ –µ–≥–æ —É—Ö–æ–¥ –∏ –ø–∏—Ç–∞–Ω–∏–µ."
                "–£–∑–Ω–∞–π –±–æ–ª—å—à–µ –æ–± –æ–ø–µ–∫–µ ‚Äî –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!"
            ),
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÅ –ü—Ä–æ–π—Ç–∏ —Å–Ω–æ–≤–∞", callback_data="start_quiz")],
                [InlineKeyboardButton("üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="leave_feedback")],
                [InlineKeyboardButton("üìò –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± –æ–ø–µ–∫–µ", callback_data="about_opeka")],
                [InlineKeyboardButton("üí¨ –ö–æ–Ω—Ç–∞–∫—Ç", callback_data="contact")],
                [
                    InlineKeyboardButton("üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ Telegram", url=share_url),
                    InlineKeyboardButton("üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤–æ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ", url=vk_url)
                ]
            ])
        )
        user_states.pop(user_id, None)
        user_answers.pop(user_id, None)

async def send_question(message, user_id):
    idx = user_states.get(user_id, 0)
    if idx >= len(QUESTIONS):
        return

    question = QUESTIONS[idx]
    keyboard = [[InlineKeyboardButton(opt["text"], callback_data=f"answer_{opt['score']}")]
                for opt in question["options"]]

    await message.reply_text(question["text"], reply_markup=InlineKeyboardMarkup(keyboard))

async def feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = update.message.text.strip()
    conn = sqlite3.connect("feedback.db")
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO feedback (user_id, username, text) VALUES (?, ?, ?)",
        (user.id, user.username, text)
    )
    conn.commit()
    conn.close()
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! üß° –ú—ã —á–∏—Ç–∞–µ–º –∫–∞–∂–¥—ã–π.")

async def admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != 5612071306:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    await update.message.reply_text(
        "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞:"
        "\n/admin_feedback ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã"
        "\n/export_feedback ‚Äî —ç–∫—Å–ø–æ—Ä—Ç CSV"
        "\n/contact ‚Äî –∫–æ–Ω—Ç–∞–∫—Ç—ã –∑–æ–æ–ø–∞—Ä–∫–∞"
        "\n/start ‚Äî –Ω–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É"
    )

async def contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_text(
        f"üì© –ö–æ–Ω—Ç–∞–∫—Ç—ã –∑–æ–æ–ø–∞—Ä–∫–∞:\n"
        f"‚úâÔ∏è Email: zoo@moscowzoo.ru\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 (495) 123-45-67\n"
        f"–í–∞—à ID: {user.id}"
    )

async def admin_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != 5612071306:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    import sqlite3
    conn = sqlite3.connect("feedback.db")
    cursor = conn.cursor()
    cursor.execute("SELECT user_id, username, text, timestamp FROM feedback ORDER BY id DESC LIMIT 10")
    rows = cursor.fetchall()
    conn.close()

    if not rows:
        await update.message.reply_text("–û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    message = "\n\n".join([f"üë§ @{r[1] or '‚Äî'} ({r[0]})\nüïí {r[3]}\nüí¨ {r[2]}" for r in rows])
    await update.message.reply_text(f"üì• –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã:\n\n{message}")

async def export_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != 5612071306:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç–∫—Å–ø–æ—Ä—Ç—É.")
        return

    import sqlite3, csv
    conn = sqlite3.connect("feedback.db")
    cursor = conn.cursor()
    cursor.execute("SELECT user_id, username, text, timestamp FROM feedback")
    rows = cursor.fetchall()
    conn.close()

    if not rows:
        await update.message.reply_text("–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
        return

    with open("feedback_export.csv", "w", newline='', encoding="utf-8") as csvfile:
        writer = csv.writer(csvfile)
        writer.writerow(["User ID", "Username", "Text", "Timestamp"])
        writer.writerows(rows)

    with open("feedback_export.csv", "rb") as csvfile:
        await update.message.reply_document(csvfile, filename="feedback_export.csv")


def main():
    app = ApplicationBuilder().token("7968140640:AAGo4G4BkchwBxrha_V6DGsgc-0AVISrxUk").build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("admin", admin))
    app.add_handler(CallbackQueryHandler(button))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, feedback))
    app.add_handler(CommandHandler("admin_feedback", admin_feedback))
    app.add_handler(CommandHandler("export_feedback", export_feedback))
    app.add_handler(CommandHandler("contact", contact))
    app.run_polling()

if __name__ == "__main__":
    main()
